var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"","category":"page"},{"location":"api/","page":"API","title":"API","text":"Modules = [GeometricAlgebra]\nPrivate = false","category":"page"},{"location":"api/#GeometricAlgebra.:∧","page":"API","title":"GeometricAlgebra.:∧","text":"x ∧ y\n\nOuter product of x with y.\n\n\n\n\n\n","category":"function"},{"location":"api/#GeometricAlgebra.:∨","page":"API","title":"GeometricAlgebra.:∨","text":"x ∨ y\n\nMeet of x and y\n\n\n\n\n\n","category":"function"},{"location":"api/#GeometricAlgebra.:⋅","page":"API","title":"GeometricAlgebra.:⋅","text":"x ⋅ y\n\nInner product of x with y. This product is in general non-associative, and is conventinally executed right to left in absence of parenthesis. For example, A ⋅ B ⋅ C == A ⋅ (B ⋅ C), and in most cases, A ⋅ B ⋅ C ≠ (A ⋅ B) ⋅ C.\n\n\n\n\n\n","category":"function"},{"location":"api/#GeometricAlgebra.:⦿","page":"API","title":"GeometricAlgebra.:⦿","text":"x ⦿ y\n\nScalar product between x and y.\n\n\n\n\n\n","category":"function"},{"location":"api/#GeometricAlgebra.dual","page":"API","title":"GeometricAlgebra.dual","text":"Duality operator.\n\n\n\n\n\n","category":"function"},{"location":"api/#GeometricAlgebra.lcontract","page":"API","title":"GeometricAlgebra.lcontract","text":"lcontract(x, y)\n\nLeft contraction of x with y.\n\n\n\n\n\n","category":"function"},{"location":"api/#GeometricAlgebra.rcontract","page":"API","title":"GeometricAlgebra.rcontract","text":"rcontract(x, y)\n\nRight contraction of x with y.\n\n\n\n\n\n","category":"function"},{"location":"api/#GeometricAlgebra.@basis-Tuple{AbstractString, Vararg{Any, N} where N}","page":"API","title":"GeometricAlgebra.@basis","text":"@basis <signature> [prefix=v, export_symbols=true, export_metadata=true, export_pseudoscalar=true, modname=GeneratedGA]\n\nCreate a module modname, fill it with all unit blade symbols from a geometric algebra with a given signature prefixed with prefix, and import it with using. The exported variables depend on the options export_symbols and export_metadata. If export_symbols is true, then all unit blade symbols are exported. If export_metadata is true, then the following symbols are exported:\n\nN: the dimension of the algebra\nTABLE: the table containing precomputed values for blade products\nSIGNATURE: the signature used to build the algebra\nMultivectorArray: a concrete multivector array representation, with 2^N coefficients.\n\nIf export_pseudoscalar is true, then the alias I = v₁...ₙ will be exported.\n\nExamples\n\nTo obtain the unit blades of 𝒢(ℝ³) the geometric algebra over the 3-dimensional vector space ℝ³, you just have to specify a positive signature with \"+++\":\n\njulia> @basis \"+++\" # v is the default prefix\n\nTo bind the blades to variables with different prefix than the default v, just add the prefix after the signature:\n\njulia> @basis \"+++\" prefix=g # assigned variables will be g, g1, g12...\n\n\n\n\n\n","category":"macro"},{"location":"intro/#Introduction","page":"Introduction","title":"Introduction","text":"","category":"section"},{"location":"intro/","page":"Introduction","title":"Introduction","text":"Geometric algebra can simplify many rules and exceptions that are commonly found in vector algebra. As an algebra, it is a tool that allows one to express mathematical operations over certain entities. It is widely known that 2D dilations and rotations are more easily described with complex numbers, and to a lesser extent that quaternions are preferred for dealing with 3D rotations. It turns out that complex numbers and quaternions are sub-algebras of geometric algebra. To be exact, the term geometric algebra refers to a Clifford algebra of a vector space over the field of real numbers.","category":"page"},{"location":"intro/","page":"Introduction","title":"Introduction","text":"It uses a more complex structure than vector algebra, where vectors are defined as simple arrays of numbers that have no meaning other than being a list of coordinates. However, what we traditionally consider as vectors are in reality a little more complicated than that. For example, one may find that vectors that result from a cross-product do not follow the same invariance laws than vectors do in physics, and label them as pseudovectors. Geometric algebra accounts for this dissimilarity, describing the cross-product of two vectors as bivectors. The cross-product itself is substituted by another product, called the outer product, and is also defined in two dimensions without requiring a 3D framework. By considering vectors as mathematical entities that possess a particular structure, many theorems and laws appear more natural.","category":"page"},{"location":"#GeometricAlgebra.jl","page":"Home","title":"GeometricAlgebra.jl","text":"","category":"section"},{"location":"#Status","page":"Home","title":"Status","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package is currently in heavy development. The source code and public API may change at any moment. Use at your own risk.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"intro.md\", \"api.md\"]","category":"page"}]
}
